{
  "resolvedId": "/Users/jang-yeong-ug/Documents/zooper/node_modules/@nuxtjs/mdc/dist/runtime/components/MDCSlot.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<script>\nimport { flatUnwrap } from \"../utils/node\";\nimport { defineComponent, getCurrentInstance, useSlots, computed, h } from \"#imports\";\nexport default defineComponent({\n  name: \"MDCSlot\",\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: \"default\"\n    },\n    /**\n     * Tags to unwrap separated by spaces\n     * Example: 'ul li'\n     */\n    unwrap: {\n      type: [Boolean, String],\n      default: false\n    },\n    /**\n     * VNode to render\n     * This is only useful for render functions\n     */\n    use: {\n      type: Function,\n      default: void 0\n    }\n  },\n  setup(props) {\n    const { parent } = getCurrentInstance();\n    const { default: fallbackSlot } = useSlots();\n    const tags = computed(() => {\n      if (typeof props.unwrap === \"string\") {\n        return props.unwrap.split(\" \");\n      }\n      return [\"*\"];\n    });\n    return {\n      fallbackSlot,\n      tags,\n      parent\n    };\n  },\n  render({ use, unwrap, fallbackSlot, tags, parent }) {\n    try {\n      let slot = use;\n      if (typeof use === \"string\") {\n        slot = parent?.slots[use] || parent?.parent?.slots[use];\n        console.warn(`Please set :use=\"$slots.${use}\" in <MDCSlot> component to enable reactivity`);\n      }\n      if (!slot) {\n        return fallbackSlot ? fallbackSlot() : h(\"div\");\n      }\n      return unwrap ? flatUnwrap(slot(), tags) : [slot()];\n    } catch {\n      return h(\"div\");\n    }\n  }\n});\n</script>\n",
      "start": 1748499204941,
      "end": 1748499205052,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "pre"
    },
    {
      "name": "fontaine-transform",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "\nimport { flatUnwrap } from \"../utils/node\";\nimport { defineComponent, getCurrentInstance, useSlots, computed, h } from \"#imports\";\nconst _sfc_main = defineComponent({\n  name: \"MDCSlot\",\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: \"default\"\n    },\n    /**\n     * Tags to unwrap separated by spaces\n     * Example: 'ul li'\n     */\n    unwrap: {\n      type: [Boolean, String],\n      default: false\n    },\n    /**\n     * VNode to render\n     * This is only useful for render functions\n     */\n    use: {\n      type: Function,\n      default: void 0\n    }\n  },\n  setup(props) {\n    const { parent } = getCurrentInstance();\n    const { default: fallbackSlot } = useSlots();\n    const tags = computed(() => {\n      if (typeof props.unwrap === \"string\") {\n        return props.unwrap.split(\" \");\n      }\n      return [\"*\"];\n    });\n    return {\n      fallbackSlot,\n      tags,\n      parent\n    };\n  },\n  render({ use, unwrap, fallbackSlot, tags, parent }) {\n    try {\n      let slot = use;\n      if (typeof use === \"string\") {\n        slot = parent?.slots[use] || parent?.parent?.slots[use];\n        console.warn(`Please set :use=\"$slots.${use}\" in <MDCSlot> component to enable reactivity`);\n      }\n      if (!slot) {\n        return fallbackSlot ? fallbackSlot() : h(\"div\");\n      }\n      return unwrap ? flatUnwrap(slot(), tags) : [slot()];\n    } catch {\n      return h(\"div\");\n    }\n  }\n});\n\n\n\n\nexport default _sfc_main",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1748499205052,
      "end": 1748499205052,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { defineComponent, getCurrentInstance, useSlots, computed, h } from 'vue';\n\nimport { flatUnwrap } from \"../utils/node\";\nconst _sfc_main = defineComponent({\n  name: \"MDCSlot\",\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: \"default\"\n    },\n    /**\n     * Tags to unwrap separated by spaces\n     * Example: 'ul li'\n     */\n    unwrap: {\n      type: [Boolean, String],\n      default: false\n    },\n    /**\n     * VNode to render\n     * This is only useful for render functions\n     */\n    use: {\n      type: Function,\n      default: void 0\n    }\n  },\n  setup(props) {\n    const { parent } = getCurrentInstance();\n    const { default: fallbackSlot } = useSlots();\n    const tags = computed(() => {\n      if (typeof props.unwrap === \"string\") {\n        return props.unwrap.split(\" \");\n      }\n      return [\"*\"];\n    });\n    return {\n      fallbackSlot,\n      tags,\n      parent\n    };\n  },\n  render({ use, unwrap, fallbackSlot, tags, parent }) {\n    try {\n      let slot = use;\n      if (typeof use === \"string\") {\n        slot = parent?.slots[use] || parent?.parent?.slots[use];\n        console.warn(`Please set :use=\"$slots.${use}\" in <MDCSlot> component to enable reactivity`);\n      }\n      if (!slot) {\n        return fallbackSlot ? fallbackSlot() : h(\"div\");\n      }\n      return unwrap ? flatUnwrap(slot(), tags) : [slot()];\n    } catch {\n      return h(\"div\");\n    }\n  }\n});\n\n\n\n\nexport default _sfc_main",
      "start": 1748499205052,
      "end": 1748499205053,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnnG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC;AACF,CAAC,CAAC;;;;;AAKF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC"
      }
    },
    {
      "name": "unctx:transform",
      "start": 1748499205053,
      "end": 1748499205053,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1748499205053,
      "end": 1748499205053,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1748499205053,
      "end": 1748499205053,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1748499205053,
      "end": 1748499205053,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1748499205053,
      "end": 1748499205053,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1748499205053,
      "end": 1748499205053,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1748499205053,
      "end": 1748499205053,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1748499205053,
      "end": 1748499205053,
      "order": "normal"
    }
  ]
}
