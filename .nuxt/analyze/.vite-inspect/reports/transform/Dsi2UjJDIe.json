{
  "resolvedId": "/Users/jang-yeong-ug/Documents/zooper/node_modules/ohash/dist/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { o as objectHash } from './shared/ohash.BvSMZzli.mjs';\nexport { d as diff, i as isEqual } from './shared/ohash.BvSMZzli.mjs';\n\nclass WordArray {\n  words;\n  sigBytes;\n  constructor(words, sigBytes) {\n    words = this.words = words || [];\n    this.sigBytes = sigBytes === void 0 ? words.length * 4 : sigBytes;\n  }\n  toString(encoder) {\n    return (encoder || Hex).stringify(this);\n  }\n  concat(wordArray) {\n    this.clamp();\n    if (this.sigBytes % 4) {\n      for (let i = 0; i < wordArray.sigBytes; i++) {\n        const thatByte = wordArray.words[i >>> 2] >>> 24 - i % 4 * 8 & 255;\n        this.words[this.sigBytes + i >>> 2] |= thatByte << 24 - (this.sigBytes + i) % 4 * 8;\n      }\n    } else {\n      for (let j = 0; j < wordArray.sigBytes; j += 4) {\n        this.words[this.sigBytes + j >>> 2] = wordArray.words[j >>> 2];\n      }\n    }\n    this.sigBytes += wordArray.sigBytes;\n    return this;\n  }\n  clamp() {\n    this.words[this.sigBytes >>> 2] &= 4294967295 << 32 - this.sigBytes % 4 * 8;\n    this.words.length = Math.ceil(this.sigBytes / 4);\n  }\n  clone() {\n    return new WordArray([...this.words]);\n  }\n}\nconst Hex = {\n  stringify(wordArray) {\n    const hexChars = [];\n    for (let i = 0; i < wordArray.sigBytes; i++) {\n      const bite = wordArray.words[i >>> 2] >>> 24 - i % 4 * 8 & 255;\n      hexChars.push((bite >>> 4).toString(16), (bite & 15).toString(16));\n    }\n    return hexChars.join(\"\");\n  }\n};\nconst Base64 = {\n  stringify(wordArray) {\n    const keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const base64Chars = [];\n    for (let i = 0; i < wordArray.sigBytes; i += 3) {\n      const byte1 = wordArray.words[i >>> 2] >>> 24 - i % 4 * 8 & 255;\n      const byte2 = wordArray.words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;\n      const byte3 = wordArray.words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;\n      const triplet = byte1 << 16 | byte2 << 8 | byte3;\n      for (let j = 0; j < 4 && i * 8 + j * 6 < wordArray.sigBytes * 8; j++) {\n        base64Chars.push(keyStr.charAt(triplet >>> 6 * (3 - j) & 63));\n      }\n    }\n    return base64Chars.join(\"\");\n  }\n};\nconst Latin1 = {\n  parse(latin1Str) {\n    const latin1StrLength = latin1Str.length;\n    const words = [];\n    for (let i = 0; i < latin1StrLength; i++) {\n      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;\n    }\n    return new WordArray(words, latin1StrLength);\n  }\n};\nconst Utf8 = {\n  parse(utf8Str) {\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n  }\n};\nclass BufferedBlockAlgorithm {\n  _data = new WordArray();\n  _nDataBytes = 0;\n  _minBufferSize = 0;\n  blockSize = 512 / 32;\n  reset() {\n    this._data = new WordArray();\n    this._nDataBytes = 0;\n  }\n  _append(data) {\n    if (typeof data === \"string\") {\n      data = Utf8.parse(data);\n    }\n    this._data.concat(data);\n    this._nDataBytes += data.sigBytes;\n  }\n  _doProcessBlock(_dataWords, _offset) {\n  }\n  _process(doFlush) {\n    let processedWords;\n    let nBlocksReady = this._data.sigBytes / (this.blockSize * 4);\n    if (doFlush) {\n      nBlocksReady = Math.ceil(nBlocksReady);\n    } else {\n      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n    }\n    const nWordsReady = nBlocksReady * this.blockSize;\n    const nBytesReady = Math.min(nWordsReady * 4, this._data.sigBytes);\n    if (nWordsReady) {\n      for (let offset = 0; offset < nWordsReady; offset += this.blockSize) {\n        this._doProcessBlock(this._data.words, offset);\n      }\n      processedWords = this._data.words.splice(0, nWordsReady);\n      this._data.sigBytes -= nBytesReady;\n    }\n    return new WordArray(processedWords, nBytesReady);\n  }\n}\nclass Hasher extends BufferedBlockAlgorithm {\n  update(messageUpdate) {\n    this._append(messageUpdate);\n    this._process();\n    return this;\n  }\n  finalize(messageUpdate) {\n    if (messageUpdate) {\n      this._append(messageUpdate);\n    }\n  }\n}\n\nconst H = [\n  1779033703,\n  -1150833019,\n  1013904242,\n  -1521486534,\n  1359893119,\n  -1694144372,\n  528734635,\n  1541459225\n];\nconst K = [\n  1116352408,\n  1899447441,\n  -1245643825,\n  -373957723,\n  961987163,\n  1508970993,\n  -1841331548,\n  -1424204075,\n  -670586216,\n  310598401,\n  607225278,\n  1426881987,\n  1925078388,\n  -2132889090,\n  -1680079193,\n  -1046744716,\n  -459576895,\n  -272742522,\n  264347078,\n  604807628,\n  770255983,\n  1249150122,\n  1555081692,\n  1996064986,\n  -1740746414,\n  -1473132947,\n  -1341970488,\n  -1084653625,\n  -958395405,\n  -710438585,\n  113926993,\n  338241895,\n  666307205,\n  773529912,\n  1294757372,\n  1396182291,\n  1695183700,\n  1986661051,\n  -2117940946,\n  -1838011259,\n  -1564481375,\n  -1474664885,\n  -1035236496,\n  -949202525,\n  -778901479,\n  -694614492,\n  -200395387,\n  275423344,\n  430227734,\n  506948616,\n  659060556,\n  883997877,\n  958139571,\n  1322822218,\n  1537002063,\n  1747873779,\n  1955562222,\n  2024104815,\n  -2067236844,\n  -1933114872,\n  -1866530822,\n  -1538233109,\n  -1090935817,\n  -965641998\n];\nconst W = [];\nclass SHA256 extends Hasher {\n  _hash = new WordArray([...H]);\n  /**\n   * Resets the internal state of the hash object to initial values.\n   */\n  reset() {\n    super.reset();\n    this._hash = new WordArray([...H]);\n  }\n  _doProcessBlock(M, offset) {\n    const H2 = this._hash.words;\n    let a = H2[0];\n    let b = H2[1];\n    let c = H2[2];\n    let d = H2[3];\n    let e = H2[4];\n    let f = H2[5];\n    let g = H2[6];\n    let h = H2[7];\n    for (let i = 0; i < 64; i++) {\n      if (i < 16) {\n        W[i] = M[offset + i] | 0;\n      } else {\n        const gamma0x = W[i - 15];\n        const gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;\n        const gamma1x = W[i - 2];\n        const gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;\n        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n      }\n      const ch = e & f ^ ~e & g;\n      const maj = a & b ^ a & c ^ b & c;\n      const sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n      const sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n      const t1 = h + sigma1 + ch + K[i] + W[i];\n      const t2 = sigma0 + maj;\n      h = g;\n      g = f;\n      f = e;\n      e = d + t1 | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = t1 + t2 | 0;\n    }\n    H2[0] = H2[0] + a | 0;\n    H2[1] = H2[1] + b | 0;\n    H2[2] = H2[2] + c | 0;\n    H2[3] = H2[3] + d | 0;\n    H2[4] = H2[4] + e | 0;\n    H2[5] = H2[5] + f | 0;\n    H2[6] = H2[6] + g | 0;\n    H2[7] = H2[7] + h | 0;\n  }\n  /**\n   * Finishes the hash calculation and returns the hash as a WordArray.\n   *\n   * @param {string} messageUpdate - Additional message content to include in the hash.\n   * @returns {WordArray} The finalised hash as a WordArray.\n   */\n  finalize(messageUpdate) {\n    super.finalize(messageUpdate);\n    const nBitsTotal = this._nDataBytes * 8;\n    const nBitsLeft = this._data.sigBytes * 8;\n    this._data.words[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;\n    this._data.words[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(\n      nBitsTotal / 4294967296\n    );\n    this._data.words[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n    this._data.sigBytes = this._data.words.length * 4;\n    this._process();\n    return this._hash;\n  }\n}\nfunction sha256(message) {\n  return new SHA256().finalize(message).toString();\n}\nfunction sha256base64(message) {\n  return new SHA256().finalize(message).toString(Base64);\n}\n\nfunction hash(object, options = {}) {\n  const hashed = typeof object === \"string\" ? object : objectHash(object, options);\n  return sha256base64(hashed).slice(0, 10);\n}\n\nfunction murmurHash(key, seed = 0) {\n  if (typeof key === \"string\") {\n    key = createBuffer(key);\n  }\n  let i = 0;\n  let h1 = seed;\n  let k1;\n  let h1b;\n  const remainder = key.length & 3;\n  const bytes = key.length - remainder;\n  const c1 = 3432918353;\n  const c2 = 461845907;\n  while (i < bytes) {\n    k1 = key[i] & 255 | (key[++i] & 255) << 8 | (key[++i] & 255) << 16 | (key[++i] & 255) << 24;\n    ++i;\n    k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;\n    k1 = k1 << 15 | k1 >>> 17;\n    k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;\n    h1 ^= k1;\n    h1 = h1 << 13 | h1 >>> 19;\n    h1b = (h1 & 65535) * 5 + (((h1 >>> 16) * 5 & 65535) << 16) & 4294967295;\n    h1 = (h1b & 65535) + 27492 + (((h1b >>> 16) + 58964 & 65535) << 16);\n  }\n  k1 = 0;\n  switch (remainder) {\n    case 3: {\n      k1 ^= (key[i + 2] & 255) << 16;\n    }\n    case 2: {\n      k1 ^= (key[i + 1] & 255) << 8;\n    }\n    case 1: {\n      k1 ^= key[i] & 255;\n      k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;\n      k1 = k1 << 15 | k1 >>> 17;\n      k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;\n      h1 ^= k1;\n    }\n  }\n  h1 ^= key.length;\n  h1 ^= h1 >>> 16;\n  h1 = (h1 & 65535) * 2246822507 + (((h1 >>> 16) * 2246822507 & 65535) << 16) & 4294967295;\n  h1 ^= h1 >>> 13;\n  h1 = (h1 & 65535) * 3266489909 + (((h1 >>> 16) * 3266489909 & 65535) << 16) & 4294967295;\n  h1 ^= h1 >>> 16;\n  return h1 >>> 0;\n}\nfunction createBuffer(val) {\n  return new TextEncoder().encode(val);\n}\n\nexport { sha256base64 as digest, hash, murmurHash, objectHash, objectHash as serialize, sha256, sha256base64 };\n",
      "start": 1748498457069,
      "end": 1748498457252,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "pre"
    },
    {
      "name": "fontaine-transform",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1748498457252,
      "end": 1748498457252,
      "order": "normal"
    }
  ]
}
