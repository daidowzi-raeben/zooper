{
  "resolvedId": "/Users/jang-yeong-ug/Documents/zooper/node_modules/engine.io-client/build/esm/transports/polling.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Transport } from \"../transport.js\";\nimport { randomString } from \"../util.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport class Polling extends Transport {\n    constructor() {\n        super(...arguments);\n        this._polling = false;\n    }\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n        this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this._polling || !this.writable) {\n            let total = 0;\n            if (this._polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    _poll() {\n        this._polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n        const callback = (packet) => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this._polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this._poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, (data) => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        const query = this.query || {};\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = randomString();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n}\n",
      "start": 1748497707914,
      "end": 1748497707941,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "pre"
    },
    {
      "name": "fontaine-transform",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1748497707941,
      "end": 1748497707941,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1748497707941,
      "end": 1748497707942,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1748497707942,
      "end": 1748497707942,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1748497707942,
      "end": 1748497707942,
      "order": "normal"
    }
  ]
}
