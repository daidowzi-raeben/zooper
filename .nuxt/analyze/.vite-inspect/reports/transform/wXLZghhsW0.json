{
  "resolvedId": "/Users/jang-yeong-ug/Documents/zooper/node_modules/@nuxt/ui/dist/runtime/components/forms/Select.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template>\n  <div :class=\"ui.wrapper\">\n    <select\n      :id=\"inputId\"\n      :name=\"name\"\n      :value=\"modelValue\"\n      :required=\"required\"\n      :disabled=\"disabled || loading\"\n      :class=\"selectClass\"\n      v-bind=\"attrs\"\n      @input=\"onInput\"\n      @change=\"onChange\"\n    >\n      <template v-for=\"(option, index) in normalizedOptionsWithPlaceholder\">\n        <optgroup\n          v-if=\"option.children\"\n          :key=\"`${option[valueAttribute]}-optgroup-${index}`\"\n          :value=\"option[valueAttribute]\"\n          :label=\"option[optionAttribute]\"\n        >\n          <option\n            v-for=\"(childOption, index2) in option.children\"\n            :key=\"`${childOption[valueAttribute]}-${index}-${index2}`\"\n            :value=\"childOption[valueAttribute]\"\n            :selected=\"childOption[valueAttribute] === normalizedValue\"\n            :disabled=\"childOption.disabled\"\n            v-text=\"childOption[optionAttribute]\"\n          />\n        </optgroup>\n        <option\n          v-else\n          :key=\"`${option[valueAttribute]}-${index}`\"\n          :value=\"option[valueAttribute]\"\n          :selected=\"option[valueAttribute] === normalizedValue\"\n          :disabled=\"option.disabled\"\n          v-text=\"option[optionAttribute]\"\n        />\n      </template>\n    </select>\n\n    <span v-if=\"(isLeading && leadingIconName) || $slots.leading\" :class=\"leadingWrapperIconClass\">\n      <slot name=\"leading\" :disabled=\"disabled\" :loading=\"loading\">\n        <UIcon :name=\"leadingIconName\" :class=\"leadingIconClass\" />\n      </slot>\n    </span>\n\n    <span v-if=\"(isTrailing && trailingIconName) || $slots.trailing\" :class=\"trailingWrapperIconClass\">\n      <slot name=\"trailing\" :disabled=\"disabled\" :loading=\"loading\">\n        <UIcon :name=\"trailingIconName\" :class=\"trailingIconClass\" aria-hidden=\"true\" />\n      </slot>\n    </span>\n  </div>\n</template>\n\n<script>\nimport { computed, toRef, defineComponent } from \"vue\";\nimport { twMerge, twJoin } from \"tailwind-merge\";\nimport UIcon from \"../elements/Icon.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { useFormGroup } from \"../../composables/useFormGroup\";\nimport { mergeConfig, get } from \"../../utils\";\nimport { useInjectButtonGroup } from \"../../composables/useButtonGroup\";\nimport appConfig from \"#build/app.config\";\nimport { select } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.select, select);\nexport default defineComponent({\n  components: {\n    UIcon\n  },\n  inheritAttrs: false,\n  props: {\n    modelValue: {\n      type: [String, Number, Object],\n      default: \"\"\n    },\n    id: {\n      type: String,\n      default: null\n    },\n    name: {\n      type: String,\n      default: null\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    icon: {\n      type: String,\n      default: null\n    },\n    loadingIcon: {\n      type: String,\n      default: () => config.default.loadingIcon\n    },\n    leadingIcon: {\n      type: String,\n      default: null\n    },\n    trailingIcon: {\n      type: String,\n      default: () => config.default.trailingIcon\n    },\n    trailing: {\n      type: Boolean,\n      default: false\n    },\n    leading: {\n      type: Boolean,\n      default: false\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    padded: {\n      type: Boolean,\n      default: true\n    },\n    options: {\n      type: Array,\n      default: () => []\n    },\n    size: {\n      type: String,\n      default: null,\n      validator(value) {\n        return Object.keys(config.size).includes(value);\n      }\n    },\n    color: {\n      type: String,\n      default: () => config.default.color,\n      validator(value) {\n        return [...appConfig.ui.colors, ...Object.keys(config.color)].includes(value);\n      }\n    },\n    variant: {\n      type: String,\n      default: () => config.default.variant,\n      validator(value) {\n        return [\n          ...Object.keys(config.variant),\n          ...Object.values(config.color).flatMap((value2) => Object.keys(value2))\n        ].includes(value);\n      }\n    },\n    optionAttribute: {\n      type: String,\n      default: \"label\"\n    },\n    valueAttribute: {\n      type: String,\n      default: \"value\"\n    },\n    selectClass: {\n      type: String,\n      default: null\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: [\"update:modelValue\", \"change\"],\n  setup(props, { emit, slots }) {\n    const { ui, attrs } = useUI(\"select\", toRef(props, \"ui\"), config, toRef(props, \"class\"));\n    const { size: sizeButtonGroup, rounded } = useInjectButtonGroup({ ui, props });\n    const { emitFormChange, inputId, color, size: sizeFormGroup, name } = useFormGroup(props, config);\n    const size = computed(() => sizeButtonGroup.value || sizeFormGroup.value);\n    const onInput = (event) => {\n      emit(\"update:modelValue\", event.target.value);\n    };\n    const onChange = (event) => {\n      emitFormChange();\n      emit(\"change\", event);\n    };\n    const guessOptionValue = (option) => {\n      return get(option, props.valueAttribute, get(option, props.optionAttribute));\n    };\n    const guessOptionText = (option) => {\n      return get(option, props.optionAttribute, get(option, props.valueAttribute));\n    };\n    const normalizeOption = (option) => {\n      if ([\"string\", \"number\", \"boolean\"].includes(typeof option)) {\n        return {\n          [props.valueAttribute]: option,\n          [props.optionAttribute]: option\n        };\n      }\n      return {\n        ...option,\n        [props.valueAttribute]: guessOptionValue(option),\n        [props.optionAttribute]: guessOptionText(option)\n      };\n    };\n    const normalizedOptions = computed(() => {\n      return props.options.map((option) => normalizeOption(option));\n    });\n    const normalizedOptionsWithPlaceholder = computed(() => {\n      if (!props.placeholder) {\n        return normalizedOptions.value;\n      }\n      return [\n        {\n          [props.valueAttribute]: \"\",\n          [props.optionAttribute]: props.placeholder,\n          disabled: true\n        },\n        ...normalizedOptions.value\n      ];\n    });\n    const normalizedValue = computed(() => {\n      const normalizeModelValue = normalizeOption(props.modelValue);\n      const foundOption = normalizedOptionsWithPlaceholder.value.find((option) => option[props.valueAttribute] === normalizeModelValue[props.valueAttribute]);\n      if (!foundOption) {\n        return \"\";\n      }\n      return foundOption[props.valueAttribute];\n    });\n    const selectClass = computed(() => {\n      const variant = ui.value.color?.[color.value]?.[props.variant] || ui.value.variant[props.variant];\n      return twMerge(twJoin(\n        ui.value.base,\n        ui.value.form,\n        rounded.value,\n        ui.value.size[size.value],\n        props.padded ? ui.value.padding[size.value] : \"p-0\",\n        variant?.replaceAll(\"{color}\", color.value),\n        (isLeading.value || slots.leading) && ui.value.leading.padding[size.value],\n        (isTrailing.value || slots.trailing) && ui.value.trailing.padding[size.value]\n      ), props.selectClass);\n    });\n    const isLeading = computed(() => {\n      return props.icon && props.leading || props.icon && !props.trailing || props.loading && !props.trailing || props.leadingIcon;\n    });\n    const isTrailing = computed(() => {\n      return props.icon && props.trailing || props.loading && props.trailing || props.trailingIcon;\n    });\n    const leadingIconName = computed(() => {\n      if (props.loading) {\n        return props.loadingIcon;\n      }\n      return props.leadingIcon || props.icon;\n    });\n    const trailingIconName = computed(() => {\n      if (props.loading && !isLeading.value) {\n        return props.loadingIcon;\n      }\n      return props.trailingIcon || props.icon;\n    });\n    const leadingWrapperIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.leading.wrapper,\n        ui.value.icon.leading.pointer,\n        ui.value.icon.leading.padding[size.value]\n      );\n    });\n    const leadingIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        color.value && appConfig.ui.colors.includes(color.value) && ui.value.icon.color.replaceAll(\"{color}\", color.value),\n        ui.value.icon.size[size.value],\n        props.loading && ui.value.icon.loading\n      );\n    });\n    const trailingWrapperIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.trailing.wrapper,\n        ui.value.icon.trailing.pointer,\n        ui.value.icon.trailing.padding[size.value]\n      );\n    });\n    const trailingIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        color.value && appConfig.ui.colors.includes(color.value) && ui.value.icon.color.replaceAll(\"{color}\", color.value),\n        ui.value.icon.size[size.value],\n        props.loading && !isLeading.value && ui.value.icon.loading\n      );\n    });\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      attrs,\n      // eslint-disable-next-line vue/no-dupe-keys\n      name,\n      inputId,\n      normalizedOptionsWithPlaceholder,\n      normalizedValue,\n      isLeading,\n      isTrailing,\n      // eslint-disable-next-line vue/no-dupe-keys\n      selectClass,\n      leadingIconName,\n      leadingIconClass,\n      leadingWrapperIconClass,\n      trailingIconName,\n      trailingIconClass,\n      trailingWrapperIconClass,\n      onInput,\n      onChange\n    };\n  }\n});\n</script>\n",
      "start": 1748498039015,
      "end": 1748498039118,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1748498039118,
      "end": 1748498039118,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1748498039118,
      "end": 1748498039118,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1748498039118,
      "end": 1748498039118,
      "order": "pre"
    },
    {
      "name": "fontaine-transform",
      "start": 1748498039118,
      "end": 1748498039118,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1748498039118,
      "end": 1748498039118,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1748498039118,
      "end": 1748498039118,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1748498039118,
      "end": 1748498039118,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1748498039118,
      "end": 1748498039118,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1748498039118,
      "end": 1748498039118,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "\nimport { computed, toRef, defineComponent } from \"vue\";\nimport { twMerge, twJoin } from \"tailwind-merge\";\nimport UIcon from \"../elements/Icon.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { useFormGroup } from \"../../composables/useFormGroup\";\nimport { mergeConfig, get } from \"../../utils\";\nimport { useInjectButtonGroup } from \"../../composables/useButtonGroup\";\nimport appConfig from \"#build/app.config\";\nimport { select } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.select, select);\nconst _sfc_main = defineComponent({\n  components: {\n    UIcon\n  },\n  inheritAttrs: false,\n  props: {\n    modelValue: {\n      type: [String, Number, Object],\n      default: \"\"\n    },\n    id: {\n      type: String,\n      default: null\n    },\n    name: {\n      type: String,\n      default: null\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    icon: {\n      type: String,\n      default: null\n    },\n    loadingIcon: {\n      type: String,\n      default: () => config.default.loadingIcon\n    },\n    leadingIcon: {\n      type: String,\n      default: null\n    },\n    trailingIcon: {\n      type: String,\n      default: () => config.default.trailingIcon\n    },\n    trailing: {\n      type: Boolean,\n      default: false\n    },\n    leading: {\n      type: Boolean,\n      default: false\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    padded: {\n      type: Boolean,\n      default: true\n    },\n    options: {\n      type: Array,\n      default: () => []\n    },\n    size: {\n      type: String,\n      default: null,\n      validator(value) {\n        return Object.keys(config.size).includes(value);\n      }\n    },\n    color: {\n      type: String,\n      default: () => config.default.color,\n      validator(value) {\n        return [...appConfig.ui.colors, ...Object.keys(config.color)].includes(value);\n      }\n    },\n    variant: {\n      type: String,\n      default: () => config.default.variant,\n      validator(value) {\n        return [\n          ...Object.keys(config.variant),\n          ...Object.values(config.color).flatMap((value2) => Object.keys(value2))\n        ].includes(value);\n      }\n    },\n    optionAttribute: {\n      type: String,\n      default: \"label\"\n    },\n    valueAttribute: {\n      type: String,\n      default: \"value\"\n    },\n    selectClass: {\n      type: String,\n      default: null\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: [\"update:modelValue\", \"change\"],\n  setup(props, { emit, slots }) {\n    const { ui, attrs } = useUI(\"select\", toRef(props, \"ui\"), config, toRef(props, \"class\"));\n    const { size: sizeButtonGroup, rounded } = useInjectButtonGroup({ ui, props });\n    const { emitFormChange, inputId, color, size: sizeFormGroup, name } = useFormGroup(props, config);\n    const size = computed(() => sizeButtonGroup.value || sizeFormGroup.value);\n    const onInput = (event) => {\n      emit(\"update:modelValue\", event.target.value);\n    };\n    const onChange = (event) => {\n      emitFormChange();\n      emit(\"change\", event);\n    };\n    const guessOptionValue = (option) => {\n      return get(option, props.valueAttribute, get(option, props.optionAttribute));\n    };\n    const guessOptionText = (option) => {\n      return get(option, props.optionAttribute, get(option, props.valueAttribute));\n    };\n    const normalizeOption = (option) => {\n      if ([\"string\", \"number\", \"boolean\"].includes(typeof option)) {\n        return {\n          [props.valueAttribute]: option,\n          [props.optionAttribute]: option\n        };\n      }\n      return {\n        ...option,\n        [props.valueAttribute]: guessOptionValue(option),\n        [props.optionAttribute]: guessOptionText(option)\n      };\n    };\n    const normalizedOptions = computed(() => {\n      return props.options.map((option) => normalizeOption(option));\n    });\n    const normalizedOptionsWithPlaceholder = computed(() => {\n      if (!props.placeholder) {\n        return normalizedOptions.value;\n      }\n      return [\n        {\n          [props.valueAttribute]: \"\",\n          [props.optionAttribute]: props.placeholder,\n          disabled: true\n        },\n        ...normalizedOptions.value\n      ];\n    });\n    const normalizedValue = computed(() => {\n      const normalizeModelValue = normalizeOption(props.modelValue);\n      const foundOption = normalizedOptionsWithPlaceholder.value.find((option) => option[props.valueAttribute] === normalizeModelValue[props.valueAttribute]);\n      if (!foundOption) {\n        return \"\";\n      }\n      return foundOption[props.valueAttribute];\n    });\n    const selectClass = computed(() => {\n      const variant = ui.value.color?.[color.value]?.[props.variant] || ui.value.variant[props.variant];\n      return twMerge(twJoin(\n        ui.value.base,\n        ui.value.form,\n        rounded.value,\n        ui.value.size[size.value],\n        props.padded ? ui.value.padding[size.value] : \"p-0\",\n        variant?.replaceAll(\"{color}\", color.value),\n        (isLeading.value || slots.leading) && ui.value.leading.padding[size.value],\n        (isTrailing.value || slots.trailing) && ui.value.trailing.padding[size.value]\n      ), props.selectClass);\n    });\n    const isLeading = computed(() => {\n      return props.icon && props.leading || props.icon && !props.trailing || props.loading && !props.trailing || props.leadingIcon;\n    });\n    const isTrailing = computed(() => {\n      return props.icon && props.trailing || props.loading && props.trailing || props.trailingIcon;\n    });\n    const leadingIconName = computed(() => {\n      if (props.loading) {\n        return props.loadingIcon;\n      }\n      return props.leadingIcon || props.icon;\n    });\n    const trailingIconName = computed(() => {\n      if (props.loading && !isLeading.value) {\n        return props.loadingIcon;\n      }\n      return props.trailingIcon || props.icon;\n    });\n    const leadingWrapperIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.leading.wrapper,\n        ui.value.icon.leading.pointer,\n        ui.value.icon.leading.padding[size.value]\n      );\n    });\n    const leadingIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        color.value && appConfig.ui.colors.includes(color.value) && ui.value.icon.color.replaceAll(\"{color}\", color.value),\n        ui.value.icon.size[size.value],\n        props.loading && ui.value.icon.loading\n      );\n    });\n    const trailingWrapperIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.trailing.wrapper,\n        ui.value.icon.trailing.pointer,\n        ui.value.icon.trailing.padding[size.value]\n      );\n    });\n    const trailingIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        color.value && appConfig.ui.colors.includes(color.value) && ui.value.icon.color.replaceAll(\"{color}\", color.value),\n        ui.value.icon.size[size.value],\n        props.loading && !isLeading.value && ui.value.icon.loading\n      );\n    });\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      attrs,\n      // eslint-disable-next-line vue/no-dupe-keys\n      name,\n      inputId,\n      normalizedOptionsWithPlaceholder,\n      normalizedValue,\n      isLeading,\n      isTrailing,\n      // eslint-disable-next-line vue/no-dupe-keys\n      selectClass,\n      leadingIconName,\n      leadingIconClass,\n      leadingWrapperIconClass,\n      trailingIconName,\n      trailingIconClass,\n      trailingWrapperIconClass,\n      onInput,\n      onChange\n    };\n  }\n});\n\nimport { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, mergeProps as _mergeProps, createElementVNode as _createElementVNode, renderSlot as _renderSlot, resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, createVNode as _createVNode } from \"vue\"\n\nconst _hoisted_1 = [\"id\", \"name\", \"value\", \"required\", \"disabled\"]\nconst _hoisted_2 = [\"value\", \"label\"]\nconst _hoisted_3 = [\"value\", \"selected\", \"disabled\", \"textContent\"]\nconst _hoisted_4 = [\"value\", \"selected\", \"disabled\", \"textContent\"]\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UIcon = _resolveComponent(\"UIcon\")\n\n  return (_openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(_ctx.ui.wrapper)\n  }, [\n    _createElementVNode(\"select\", _mergeProps({\n      id: _ctx.inputId,\n      name: _ctx.name,\n      value: _ctx.modelValue,\n      required: _ctx.required,\n      disabled: _ctx.disabled || _ctx.loading,\n      class: _ctx.selectClass\n    }, _ctx.attrs, {\n      onInput: _cache[0] || (_cache[0] = (...args) => (_ctx.onInput && _ctx.onInput(...args))),\n      onChange: _cache[1] || (_cache[1] = (...args) => (_ctx.onChange && _ctx.onChange(...args)))\n    }), [\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.normalizedOptionsWithPlaceholder, (option, index) => {\n        return (_openBlock(), _createElementBlock(_Fragment, null, [\n          (option.children)\n            ? (_openBlock(), _createElementBlock(\"optgroup\", {\n                key: `${option[_ctx.valueAttribute]}-optgroup-${index}`,\n                value: option[_ctx.valueAttribute],\n                label: option[_ctx.optionAttribute]\n              }, [\n                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(option.children, (childOption, index2) => {\n                  return (_openBlock(), _createElementBlock(\"option\", {\n                    key: `${childOption[_ctx.valueAttribute]}-${index}-${index2}`,\n                    value: childOption[_ctx.valueAttribute],\n                    selected: childOption[_ctx.valueAttribute] === _ctx.normalizedValue,\n                    disabled: childOption.disabled,\n                    textContent: _toDisplayString(childOption[_ctx.optionAttribute])\n                  }, null, 8, _hoisted_3))\n                }), 128))\n              ], 8, _hoisted_2))\n            : (_openBlock(), _createElementBlock(\"option\", {\n                key: `${option[_ctx.valueAttribute]}-${index}`,\n                value: option[_ctx.valueAttribute],\n                selected: option[_ctx.valueAttribute] === _ctx.normalizedValue,\n                disabled: option.disabled,\n                textContent: _toDisplayString(option[_ctx.optionAttribute])\n              }, null, 8, _hoisted_4))\n        ], 64))\n      }), 256))\n    ], 16, _hoisted_1),\n    ((_ctx.isLeading && _ctx.leadingIconName) || _ctx.$slots.leading)\n      ? (_openBlock(), _createElementBlock(\"span\", {\n          key: 0,\n          class: _normalizeClass(_ctx.leadingWrapperIconClass)\n        }, [\n          _renderSlot(_ctx.$slots, \"leading\", {\n            disabled: _ctx.disabled,\n            loading: _ctx.loading\n          }, () => [\n            _createVNode(_component_UIcon, {\n              name: _ctx.leadingIconName,\n              class: _normalizeClass(_ctx.leadingIconClass)\n            }, null, 8, [\"name\", \"class\"])\n          ])\n        ], 2))\n      : _createCommentVNode(\"\", true),\n    ((_ctx.isTrailing && _ctx.trailingIconName) || _ctx.$slots.trailing)\n      ? (_openBlock(), _createElementBlock(\"span\", {\n          key: 1,\n          class: _normalizeClass(_ctx.trailingWrapperIconClass)\n        }, [\n          _renderSlot(_ctx.$slots, \"trailing\", {\n            disabled: _ctx.disabled,\n            loading: _ctx.loading\n          }, () => [\n            _createVNode(_component_UIcon, {\n              name: _ctx.trailingIconName,\n              class: _normalizeClass(_ctx.trailingIconClass),\n              \"aria-hidden\": \"true\"\n            }, null, 8, [\"name\", \"class\"])\n          ])\n        ], 2))\n      : _createCommentVNode(\"\", true)\n  ], 2))\n}\n\n\nimport _export_sfc from '\u0000plugin-vue:export-helper'\nexport default /*#__PURE__*/_export_sfc(_sfc_main, [['render',_sfc_render]])",
      "start": 1748498039118,
      "end": 1748498039120,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "result": "import { default as __nuxt_component_0 } from \"/Users/jang-yeong-ug/Documents/zooper/node_modules/@nuxt/ui/dist/runtime/components/elements/Icon.vue\";\n\nimport { computed, toRef, defineComponent } from \"vue\";\nimport { twMerge, twJoin } from \"tailwind-merge\";\nimport UIcon from \"../elements/Icon.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { useFormGroup } from \"../../composables/useFormGroup\";\nimport { mergeConfig, get } from \"../../utils\";\nimport { useInjectButtonGroup } from \"../../composables/useButtonGroup\";\nimport appConfig from \"#build/app.config\";\nimport { select } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.select, select);\nconst _sfc_main = defineComponent({\n  components: {\n    UIcon\n  },\n  inheritAttrs: false,\n  props: {\n    modelValue: {\n      type: [String, Number, Object],\n      default: \"\"\n    },\n    id: {\n      type: String,\n      default: null\n    },\n    name: {\n      type: String,\n      default: null\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    icon: {\n      type: String,\n      default: null\n    },\n    loadingIcon: {\n      type: String,\n      default: () => config.default.loadingIcon\n    },\n    leadingIcon: {\n      type: String,\n      default: null\n    },\n    trailingIcon: {\n      type: String,\n      default: () => config.default.trailingIcon\n    },\n    trailing: {\n      type: Boolean,\n      default: false\n    },\n    leading: {\n      type: Boolean,\n      default: false\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    padded: {\n      type: Boolean,\n      default: true\n    },\n    options: {\n      type: Array,\n      default: () => []\n    },\n    size: {\n      type: String,\n      default: null,\n      validator(value) {\n        return Object.keys(config.size).includes(value);\n      }\n    },\n    color: {\n      type: String,\n      default: () => config.default.color,\n      validator(value) {\n        return [...appConfig.ui.colors, ...Object.keys(config.color)].includes(value);\n      }\n    },\n    variant: {\n      type: String,\n      default: () => config.default.variant,\n      validator(value) {\n        return [\n          ...Object.keys(config.variant),\n          ...Object.values(config.color).flatMap((value2) => Object.keys(value2))\n        ].includes(value);\n      }\n    },\n    optionAttribute: {\n      type: String,\n      default: \"label\"\n    },\n    valueAttribute: {\n      type: String,\n      default: \"value\"\n    },\n    selectClass: {\n      type: String,\n      default: null\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: [\"update:modelValue\", \"change\"],\n  setup(props, { emit, slots }) {\n    const { ui, attrs } = useUI(\"select\", toRef(props, \"ui\"), config, toRef(props, \"class\"));\n    const { size: sizeButtonGroup, rounded } = useInjectButtonGroup({ ui, props });\n    const { emitFormChange, inputId, color, size: sizeFormGroup, name } = useFormGroup(props, config);\n    const size = computed(() => sizeButtonGroup.value || sizeFormGroup.value);\n    const onInput = (event) => {\n      emit(\"update:modelValue\", event.target.value);\n    };\n    const onChange = (event) => {\n      emitFormChange();\n      emit(\"change\", event);\n    };\n    const guessOptionValue = (option) => {\n      return get(option, props.valueAttribute, get(option, props.optionAttribute));\n    };\n    const guessOptionText = (option) => {\n      return get(option, props.optionAttribute, get(option, props.valueAttribute));\n    };\n    const normalizeOption = (option) => {\n      if ([\"string\", \"number\", \"boolean\"].includes(typeof option)) {\n        return {\n          [props.valueAttribute]: option,\n          [props.optionAttribute]: option\n        };\n      }\n      return {\n        ...option,\n        [props.valueAttribute]: guessOptionValue(option),\n        [props.optionAttribute]: guessOptionText(option)\n      };\n    };\n    const normalizedOptions = computed(() => {\n      return props.options.map((option) => normalizeOption(option));\n    });\n    const normalizedOptionsWithPlaceholder = computed(() => {\n      if (!props.placeholder) {\n        return normalizedOptions.value;\n      }\n      return [\n        {\n          [props.valueAttribute]: \"\",\n          [props.optionAttribute]: props.placeholder,\n          disabled: true\n        },\n        ...normalizedOptions.value\n      ];\n    });\n    const normalizedValue = computed(() => {\n      const normalizeModelValue = normalizeOption(props.modelValue);\n      const foundOption = normalizedOptionsWithPlaceholder.value.find((option) => option[props.valueAttribute] === normalizeModelValue[props.valueAttribute]);\n      if (!foundOption) {\n        return \"\";\n      }\n      return foundOption[props.valueAttribute];\n    });\n    const selectClass = computed(() => {\n      const variant = ui.value.color?.[color.value]?.[props.variant] || ui.value.variant[props.variant];\n      return twMerge(twJoin(\n        ui.value.base,\n        ui.value.form,\n        rounded.value,\n        ui.value.size[size.value],\n        props.padded ? ui.value.padding[size.value] : \"p-0\",\n        variant?.replaceAll(\"{color}\", color.value),\n        (isLeading.value || slots.leading) && ui.value.leading.padding[size.value],\n        (isTrailing.value || slots.trailing) && ui.value.trailing.padding[size.value]\n      ), props.selectClass);\n    });\n    const isLeading = computed(() => {\n      return props.icon && props.leading || props.icon && !props.trailing || props.loading && !props.trailing || props.leadingIcon;\n    });\n    const isTrailing = computed(() => {\n      return props.icon && props.trailing || props.loading && props.trailing || props.trailingIcon;\n    });\n    const leadingIconName = computed(() => {\n      if (props.loading) {\n        return props.loadingIcon;\n      }\n      return props.leadingIcon || props.icon;\n    });\n    const trailingIconName = computed(() => {\n      if (props.loading && !isLeading.value) {\n        return props.loadingIcon;\n      }\n      return props.trailingIcon || props.icon;\n    });\n    const leadingWrapperIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.leading.wrapper,\n        ui.value.icon.leading.pointer,\n        ui.value.icon.leading.padding[size.value]\n      );\n    });\n    const leadingIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        color.value && appConfig.ui.colors.includes(color.value) && ui.value.icon.color.replaceAll(\"{color}\", color.value),\n        ui.value.icon.size[size.value],\n        props.loading && ui.value.icon.loading\n      );\n    });\n    const trailingWrapperIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.trailing.wrapper,\n        ui.value.icon.trailing.pointer,\n        ui.value.icon.trailing.padding[size.value]\n      );\n    });\n    const trailingIconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        color.value && appConfig.ui.colors.includes(color.value) && ui.value.icon.color.replaceAll(\"{color}\", color.value),\n        ui.value.icon.size[size.value],\n        props.loading && !isLeading.value && ui.value.icon.loading\n      );\n    });\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      attrs,\n      // eslint-disable-next-line vue/no-dupe-keys\n      name,\n      inputId,\n      normalizedOptionsWithPlaceholder,\n      normalizedValue,\n      isLeading,\n      isTrailing,\n      // eslint-disable-next-line vue/no-dupe-keys\n      selectClass,\n      leadingIconName,\n      leadingIconClass,\n      leadingWrapperIconClass,\n      trailingIconName,\n      trailingIconClass,\n      trailingWrapperIconClass,\n      onInput,\n      onChange\n    };\n  }\n});\n\nimport { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, mergeProps as _mergeProps, createElementVNode as _createElementVNode, renderSlot as _renderSlot, resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, createVNode as _createVNode } from \"vue\"\n\nconst _hoisted_1 = [\"id\", \"name\", \"value\", \"required\", \"disabled\"]\nconst _hoisted_2 = [\"value\", \"label\"]\nconst _hoisted_3 = [\"value\", \"selected\", \"disabled\", \"textContent\"]\nconst _hoisted_4 = [\"value\", \"selected\", \"disabled\", \"textContent\"]\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UIcon = __nuxt_component_0\n\n  return (_openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(_ctx.ui.wrapper)\n  }, [\n    _createElementVNode(\"select\", _mergeProps({\n      id: _ctx.inputId,\n      name: _ctx.name,\n      value: _ctx.modelValue,\n      required: _ctx.required,\n      disabled: _ctx.disabled || _ctx.loading,\n      class: _ctx.selectClass\n    }, _ctx.attrs, {\n      onInput: _cache[0] || (_cache[0] = (...args) => (_ctx.onInput && _ctx.onInput(...args))),\n      onChange: _cache[1] || (_cache[1] = (...args) => (_ctx.onChange && _ctx.onChange(...args)))\n    }), [\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.normalizedOptionsWithPlaceholder, (option, index) => {\n        return (_openBlock(), _createElementBlock(_Fragment, null, [\n          (option.children)\n            ? (_openBlock(), _createElementBlock(\"optgroup\", {\n                key: `${option[_ctx.valueAttribute]}-optgroup-${index}`,\n                value: option[_ctx.valueAttribute],\n                label: option[_ctx.optionAttribute]\n              }, [\n                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(option.children, (childOption, index2) => {\n                  return (_openBlock(), _createElementBlock(\"option\", {\n                    key: `${childOption[_ctx.valueAttribute]}-${index}-${index2}`,\n                    value: childOption[_ctx.valueAttribute],\n                    selected: childOption[_ctx.valueAttribute] === _ctx.normalizedValue,\n                    disabled: childOption.disabled,\n                    textContent: _toDisplayString(childOption[_ctx.optionAttribute])\n                  }, null, 8, _hoisted_3))\n                }), 128))\n              ], 8, _hoisted_2))\n            : (_openBlock(), _createElementBlock(\"option\", {\n                key: `${option[_ctx.valueAttribute]}-${index}`,\n                value: option[_ctx.valueAttribute],\n                selected: option[_ctx.valueAttribute] === _ctx.normalizedValue,\n                disabled: option.disabled,\n                textContent: _toDisplayString(option[_ctx.optionAttribute])\n              }, null, 8, _hoisted_4))\n        ], 64))\n      }), 256))\n    ], 16, _hoisted_1),\n    ((_ctx.isLeading && _ctx.leadingIconName) || _ctx.$slots.leading)\n      ? (_openBlock(), _createElementBlock(\"span\", {\n          key: 0,\n          class: _normalizeClass(_ctx.leadingWrapperIconClass)\n        }, [\n          _renderSlot(_ctx.$slots, \"leading\", {\n            disabled: _ctx.disabled,\n            loading: _ctx.loading\n          }, () => [\n            _createVNode(_component_UIcon, {\n              name: _ctx.leadingIconName,\n              class: _normalizeClass(_ctx.leadingIconClass)\n            }, null, 8, [\"name\", \"class\"])\n          ])\n        ], 2))\n      : _createCommentVNode(\"\", true),\n    ((_ctx.isTrailing && _ctx.trailingIconName) || _ctx.$slots.trailing)\n      ? (_openBlock(), _createElementBlock(\"span\", {\n          key: 1,\n          class: _normalizeClass(_ctx.trailingWrapperIconClass)\n        }, [\n          _renderSlot(_ctx.$slots, \"trailing\", {\n            disabled: _ctx.disabled,\n            loading: _ctx.loading\n          }, () => [\n            _createVNode(_component_UIcon, {\n              name: _ctx.trailingIconName,\n              class: _normalizeClass(_ctx.trailingIconClass),\n              \"aria-hidden\": \"true\"\n            }, null, 8, [\"name\", \"class\"])\n          ])\n        ], 2))\n      : _createCommentVNode(\"\", true)\n  ], 2))\n}\n\n\nimport _export_sfc from '\u0000plugin-vue:export-helper'\nexport default /*#__PURE__*/_export_sfc(_sfc_main, [['render',_sfc_render]])",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1748498039120,
      "end": 1748498039120,
      "order": "normal"
    }
  ]
}
