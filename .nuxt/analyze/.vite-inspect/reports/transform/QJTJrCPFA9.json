{
  "resolvedId": "/Users/jang-yeong-ug/Documents/zooper/node_modules/unstorage/dist/shared/unstorage.CoCt7NXC.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "function wrapToPromise(value) {\n  if (!value || typeof value.then !== \"function\") {\n    return Promise.resolve(value);\n  }\n  return value;\n}\nfunction asyncCall(function_, ...arguments_) {\n  try {\n    return wrapToPromise(function_(...arguments_));\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\nfunction isPrimitive(value) {\n  const type = typeof value;\n  return value === null || type !== \"object\" && type !== \"function\";\n}\nfunction isPureObject(value) {\n  const proto = Object.getPrototypeOf(value);\n  return !proto || proto.isPrototypeOf(Object);\n}\nfunction stringify(value) {\n  if (isPrimitive(value)) {\n    return String(value);\n  }\n  if (isPureObject(value) || Array.isArray(value)) {\n    return JSON.stringify(value);\n  }\n  if (typeof value.toJSON === \"function\") {\n    return stringify(value.toJSON());\n  }\n  throw new Error(\"[unstorage] Cannot stringify value!\");\n}\nconst BASE64_PREFIX = \"base64:\";\nfunction serializeRaw(value) {\n  if (typeof value === \"string\") {\n    return value;\n  }\n  return BASE64_PREFIX + base64Encode(value);\n}\nfunction deserializeRaw(value) {\n  if (typeof value !== \"string\") {\n    return value;\n  }\n  if (!value.startsWith(BASE64_PREFIX)) {\n    return value;\n  }\n  return base64Decode(value.slice(BASE64_PREFIX.length));\n}\nfunction base64Decode(input) {\n  if (globalThis.Buffer) {\n    return Buffer.from(input, \"base64\");\n  }\n  return Uint8Array.from(\n    globalThis.atob(input),\n    (c) => c.codePointAt(0)\n  );\n}\nfunction base64Encode(input) {\n  if (globalThis.Buffer) {\n    return Buffer.from(input).toString(\"base64\");\n  }\n  return globalThis.btoa(String.fromCodePoint(...input));\n}\n\nconst storageKeyProperties = [\n  \"has\",\n  \"hasItem\",\n  \"get\",\n  \"getItem\",\n  \"getItemRaw\",\n  \"set\",\n  \"setItem\",\n  \"setItemRaw\",\n  \"del\",\n  \"remove\",\n  \"removeItem\",\n  \"getMeta\",\n  \"setMeta\",\n  \"removeMeta\",\n  \"getKeys\",\n  \"clear\",\n  \"mount\",\n  \"unmount\"\n];\nfunction prefixStorage(storage, base) {\n  base = normalizeBaseKey(base);\n  if (!base) {\n    return storage;\n  }\n  const nsStorage = { ...storage };\n  for (const property of storageKeyProperties) {\n    nsStorage[property] = (key = \"\", ...args) => (\n      // @ts-ignore\n      storage[property](base + key, ...args)\n    );\n  }\n  nsStorage.getKeys = (key = \"\", ...arguments_) => storage.getKeys(base + key, ...arguments_).then((keys) => keys.map((key2) => key2.slice(base.length)));\n  nsStorage.getItems = async (items, commonOptions) => {\n    const prefixedItems = items.map(\n      (item) => typeof item === \"string\" ? base + item : { ...item, key: base + item.key }\n    );\n    const results = await storage.getItems(prefixedItems, commonOptions);\n    return results.map((entry) => ({\n      key: entry.key.slice(base.length),\n      value: entry.value\n    }));\n  };\n  nsStorage.setItems = async (items, commonOptions) => {\n    const prefixedItems = items.map((item) => ({\n      key: base + item.key,\n      value: item.value,\n      options: item.options\n    }));\n    return storage.setItems(prefixedItems, commonOptions);\n  };\n  return nsStorage;\n}\nfunction normalizeKey(key) {\n  if (!key) {\n    return \"\";\n  }\n  return key.split(\"?\")[0]?.replace(/[/\\\\]/g, \":\").replace(/:+/g, \":\").replace(/^:|:$/g, \"\") || \"\";\n}\nfunction joinKeys(...keys) {\n  return normalizeKey(keys.join(\":\"));\n}\nfunction normalizeBaseKey(base) {\n  base = normalizeKey(base);\n  return base ? base + \":\" : \"\";\n}\nfunction filterKeyByDepth(key, depth) {\n  if (depth === void 0) {\n    return true;\n  }\n  let substrCount = 0;\n  let index = key.indexOf(\":\");\n  while (index > -1) {\n    substrCount++;\n    index = key.indexOf(\":\", index + 1);\n  }\n  return substrCount <= depth;\n}\nfunction filterKeyByBase(key, base) {\n  if (base) {\n    return key.startsWith(base) && key[key.length - 1] !== \"$\";\n  }\n  return key[key.length - 1] !== \"$\";\n}\n\nexport { normalizeKey as a, asyncCall as b, filterKeyByBase as c, stringify as d, deserializeRaw as e, filterKeyByDepth as f, joinKeys as j, normalizeBaseKey as n, prefixStorage as p, serializeRaw as s };\n",
      "start": 1748518129761,
      "end": 1748518129772,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "pre"
    },
    {
      "name": "fontaine-transform",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1748518129772,
      "end": 1748518129772,
      "order": "normal"
    }
  ]
}
