{
  "resolvedId": "\u0000vite/preload-helper.js",
  "transforms": [
    {
      "name": "vite:build-import-analysis",
      "result": "const scriptRel = 'modulepreload';const assetsURL = function(dep, importerUrl) { return dep[0] === '.' ? new URL(dep, importerUrl).href : dep };const seen = {};export const __vitePreload = function preload(baseModule, deps, importerUrl) {\n    let promise = Promise.resolve();\n    // @ts-expect-error __VITE_IS_MODERN__ will be replaced with boolean later\n    if (__VITE_IS_MODERN__ && deps && deps.length > 0) {\n        const links = document.getElementsByTagName('link');\n        promise = Promise.all(deps.map((dep) => {\n            // @ts-expect-error assetsURL is declared before preload.toString()\n            dep = assetsURL(dep, importerUrl);\n            if (dep in seen)\n                return;\n            seen[dep] = true;\n            const isCss = dep.endsWith('.css');\n            const cssSelector = isCss ? '[rel=\"stylesheet\"]' : '';\n            const isBaseRelative = !!importerUrl;\n            // check if the file is already preloaded by SSR markup\n            if (isBaseRelative) {\n                // When isBaseRelative is true then we have `importerUrl` and `dep` is\n                // already converted to an absolute URL by the `assetsURL` function\n                for (let i = links.length - 1; i >= 0; i--) {\n                    const link = links[i];\n                    // The `links[i].href` is an absolute URL thanks to browser doing the work\n                    // for us. See https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes:idl-domstring-5\n                    if (link.href === dep && (!isCss || link.rel === 'stylesheet')) {\n                        return;\n                    }\n                }\n            }\n            else if (document.querySelector(`link[href=\"${dep}\"]${cssSelector}`)) {\n                return;\n            }\n            const link = document.createElement('link');\n            link.rel = isCss ? 'stylesheet' : scriptRel;\n            if (!isCss) {\n                link.as = 'script';\n                link.crossOrigin = '';\n            }\n            link.href = dep;\n            document.head.appendChild(link);\n            if (isCss) {\n                return new Promise((res, rej) => {\n                    link.addEventListener('load', res);\n                    link.addEventListener('error', () => rej(new Error(`Unable to preload CSS for ${dep}`)));\n                });\n            }\n        }));\n    }\n    return promise\n        .then(() => baseModule())\n        .catch((err) => {\n        const e = new Event('vite:preloadError', { cancelable: true });\n        // @ts-expect-error custom payload\n        e.payload = err;\n        window.dispatchEvent(e);\n        if (!e.defaultPrevented) {\n            throw err;\n        }\n    });\n}",
      "start": 1748518128009,
      "end": 1748518128009,
      "sourcemaps": null
    }
  ]
}
